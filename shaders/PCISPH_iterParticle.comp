#version 450
layout (local_size_x = 64) in; //256

#include comp_shader.incl

#define storage_in out_data
#define storage_out in_data
#define SimProps ubo

#define vbound 6

void container(uint idx) {
    float left = (SimProps.gridA.x < SimProps.gridB.x ? SimProps.gridA.x : SimProps.gridB.x) + 0.1;
    float right = (SimProps.gridA.x > SimProps.gridB.x ? SimProps.gridA.x : SimProps.gridB.x) - 0.1;

    float front = (SimProps.gridA.y > SimProps.gridB.y ? SimProps.gridA.y : SimProps.gridB.y) - 0.1;
    float back = (SimProps.gridA.y < SimProps.gridB.y ? SimProps.gridA.y : SimProps.gridB.y) + 0.1;

    float bottom = (SimProps.gridA.z < SimProps.gridB.z ? SimProps.gridA.z : SimProps.gridB.z) + 0.1;
    //float bottom = -0.1;

    // Bottom
    if (storage_out.p[idx].x.z <= bottom) {
        storage_out.p[idx].x.z = bottom;
        storage_out.p[idx].v.z = -storage_out.p[idx].v.z;
    }

    // Left
    if (storage_out.p[idx].x.x <= left) {
        storage_out.p[idx].x.x = left;
        storage_out.p[idx].v.x = -storage_out.p[idx].v.x;
    }

    // Right
    if (storage_out.p[idx].x.x >= right) {
        storage_out.p[idx].x.x = right;
        storage_out.p[idx].v.x = -storage_out.p[idx].v.x;
    }

    // Front
    if (storage_out.p[idx].x.y >= front) {
        storage_out.p[idx].x.y = front;
        storage_out.p[idx].v.y = -storage_out.p[idx].v.y;
    }

    // Back
    if (storage_out.p[idx].x.y <= back) {
        storage_out.p[idx].x.y = back;
        storage_out.p[idx].v.y = -storage_out.p[idx].v.y;
    }
}

//----------------------------------------------------------------------------------------------------------------------

vec3 speedBound(vec3 velocity) {
    if (velocity.x < -vbound) velocity.x = 0.1 * -vbound;
    if (velocity.x > vbound) velocity.x = 0.1 * vbound;

    if (velocity.y < -vbound) velocity.y = 0.1 * -vbound;
    if (velocity.y > vbound) velocity.y = 0.1 * vbound;

    if (velocity.z < -vbound) velocity.z = 0.1 * -vbound;
    if (velocity.z > vbound) velocity.z = 0.1 * vbound;

    return velocity;
}

//----------------------------------------------------------------------------------------------------------------------

void copyData(uint gID) {
    storage_out.p[gID].x = storage_in.p[gID].x;
    storage_out.p[gID].h = storage_in.p[gID].h;
    storage_out.p[gID].v = storage_in.p[gID].v;
    storage_out.p[gID].m = storage_in.p[gID].m;

    storage_out.p[gID].rho = storage_in.p[gID].rho;
    storage_out.p[gID].p = storage_in.p[gID].p;

    storage_out.p[gID].staticP = storage_in.p[gID].staticP;
    storage_out.p[gID].padding = storage_in.p[gID].padding;
}

void iterateParticle(uint gID) {
    if (storage_in.p[gID].staticP == 0) {
        vec3 viNext = pcisph_add_data.p[gID].v_adv;
        vec3 xiNext = storage_in.p[gID].x;
        viNext += pcisph_add_data.p[gID].prev_p_acc * ubo.dt;
        xiNext += viNext * ubo.dt;
        //viNext = speedBound(viNext);

        storage_out.p[gID].x = xiNext;
        storage_out.p[gID].v = viNext;
        storage_out.p[gID].rho = storage_in.p[gID].rho;
        storage_out.p[gID].p = storage_in.p[gID].p;

        container(gID);
    } else {
        copyData(gID);
    }
}

void main()
{
    //grab global ID
    uint gID = gl_GlobalInvocationID.x;

    if (gID < ubo.nr_of_particles) {
        iterateParticle(gID);
    }
}