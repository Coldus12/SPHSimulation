#version 450
layout (local_size_x = 256) in; //256

#include comp_shader.incl

struct Additional_data {
    vec3 dii;
    float aii;
    vec3 sumDijPj;
    float rho_adv;
    vec3 v_adv;
    float rho_pred;
};

layout(set = 0, binding = 4, std430) buffer additionalDataBuffer {
    Additional_data p[];
} add_data;

//----------------------------------------------------------------------------------------------------------------------

void computeSumDijPj(uint gID) {
    float dt = 0.01;

    vec3 dijpj = vec3(0);

    for (int j = 0; j < ubo.nr_of_particles; j++) {
        if (gID == j)
            continue;

        if (abs(in_data.p[j].rho) > 0.0001)
            dijpj += in_data.p[j].m * in_data.p[j].p / (in_data.p[j].rho * in_data.p[j].rho) * cs_gradKernel(in_data.p[gID].x, in_data.p[j].x);
    }

    dijpj *= -dt * dt;

    add_data.p[gID].sumDijPj = dijpj;
}

void main()
{
    //grab global ID
    uint gID = gl_GlobalInvocationID.x;

    if (gID < ubo.nr_of_particles) {
        computeSumDijPj(gID);
    }
}