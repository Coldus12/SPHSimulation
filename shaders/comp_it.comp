#version 450
layout (local_size_x = 1) in;
precision highp float;

#define PI 3.1415926538

struct Particle {
    vec3 x;                     // position
    float h;                    // radius
    vec3 v;                     // velocity
    float m;                    // mass

    float rho;                  // density
    float p;                    // pressure

    float staticP;
    float padding;
};

layout(set = 0, binding = 0) uniform SimulationProperties {
    float desired_density;
    float k;                    // normalization constant / stiffness constant
    float nr_of_particles;
    float kernelh;
} SimProps;

layout(set = 0, binding = 1, std430) buffer inBuffer {
    Particle p[];
} storage_out;

layout(set = 0, binding = 2, std430) buffer outBuffer {
    Particle p[];
} storage_in;

vec3 gradKernel(uint i, uint j) {
    float xijlength = length(storage_in.p[i].x - storage_in.p[j].x);
    if (xijlength == 0)
        return vec3(0);

    vec3 dir = (storage_in.p[i].x - storage_in.p[j].x) / xijlength;
    float val = 0;
    float q = xijlength/SimProps.kernelh;

    if (0 <= q && q < 1) {
        val = 3.0/2.0 * pow(q,2) - 2 * q;
        //val = 18 * pow(q, 2) - 12 * q;
    } else if (1 <= q && q < 2) {
        val = -pow(2 - q, 2)/2.0;
        //val = -6 * pow(1 - q, 2);
    } else {
        val = 0;
    }

    val *= 3.0/(2*PI) * 1.0/(pow(SimProps.kernelh, 3));
    //val *= 8.0 / (PI * pow(SimProps.kernelh, 3));
    dir *= val;

    return dir;
}

void copyData(uint gID) {
    storage_out.p[gID].x = storage_in.p[gID].x;
    storage_out.p[gID].h = storage_in.p[gID].h;
    storage_out.p[gID].v = storage_in.p[gID].v;
    storage_out.p[gID].m = storage_in.p[gID].m;

    storage_out.p[gID].rho = storage_in.p[gID].rho;
    storage_out.p[gID].p = storage_in.p[gID].p;

    storage_out.p[gID].staticP = storage_in.p[gID].staticP;
    storage_out.p[gID].padding = 1;
}

void iterate(uint i) {
    vec3 pressure = vec3(0);
    vec3 viscosity = vec3(0);

    for (int j = 0; j < SimProps.nr_of_particles; j++) {
        if (i == j)
            continue;

        // Note to self: as the particles get further and further from each other the density decreases which means rho --> 0
        // which leads to something/0^2, which is either inf or -inf ----> nan or -nan
        float val = 0;
        if (storage_in.p[j].rho != 0 && storage_in.p[i].rho != 0)
            val = storage_in.p[j].m * ((storage_in.p[i].p / pow(storage_in.p[i].rho, 2)) + (storage_in.p[j].p / pow(storage_in.p[j].rho, 2)));

        vec3 k = gradKernel(i, j);
        pressure += val * gradKernel(i, j);

        vec3 xij = storage_in.p[i].x - storage_in.p[j].x;

        float pval = 0;
        if (storage_in.p[j].rho != 0)
            pval = (storage_in.p[j].m / storage_in.p[j].rho) * (dot(xij, gradKernel(i, j)) /  (dot(xij, xij) + 0.01 * SimProps.kernelh));

        vec3 vij = storage_in.p[i].v - storage_in.p[j].v;
        viscosity += pval * vij;
    }

    pressure *= -storage_in.p[i].m;

    float nu = 0.00001;
    viscosity *= 2 * nu * storage_in.p[i].m;
    //pressure *= 0.1;

    vec3 gravity = vec3(0, 0, -9.81) * storage_in.p[i].m;
    
    vec3 acc = (pressure + viscosity + gravity) / storage_in.p[i].m;

    float dt = 0.01;
    vec3 viNext = storage_in.p[i].v;
    vec3 xiNext = storage_in.p[i].x;
    viNext += acc * dt/2.0f;
    xiNext += viNext * dt;
    
    storage_out.p[i].x = xiNext;
    storage_out.p[i].v = viNext;
    storage_out.p[i].rho = storage_in.p[i].rho;
    storage_out.p[i].p = storage_in.p[i].p;
}

void main() {
    uint gID = gl_GlobalInvocationID.x;

    if (gID < SimProps.nr_of_particles) {
        copyData(gID);
        if (storage_in.p[gID].staticP == 0)
            iterate(gID);
    }
}