#version 450
layout (local_size_x = 256) in;
precision highp float;

#define PI 3.1415926538

struct Particle {
    vec3 x;                     // position
    float h;                    // radius
    vec3 v;                     // velocity
    float m;                    // mass

    float rho;                  // density
    float p;                    // pressure

    float staticP;
    float padding;
};

layout(set = 0, binding = 0) uniform SimulationProperties {
    float desired_density;
    float k;                    // normalization constant / stiffness constant
    float nr_of_particles;
    float kernelh;
} SimProps;

layout(set = 0, binding = 1, std430) buffer inBuffer {
    Particle p[];
} storage_out;

layout(set = 0, binding = 2, std430) buffer outBuffer {
    Particle p[];
} storage_in;

// SDF stuff
//----------------------------------------------------------------------------------------------------------------------

vec4 sphere = vec4(0,0,-0.2,1);
Particle phantomNeighbors[64];
int actualNr = 0;
int sampleSize = 4;

// Returns smallest distance to sphere s
float sphMap(vec3 p, vec4 s) {
    float d = distance(p, s.xyz) - s.w;
    return d;
}

vec3 getClosestPoint(vec3 particlePos) {
    float d = sphMap(particlePos, sphere);
    return (sphere.xyz - particlePos) * d;
}

void getNeighbours(Particle p) {
    vec3 closestP = getClosestPoint(p.x);
    float dist = 0.1;
    vec3 start = closestP - vec3(-sampleSize*dist,-sampleSize*dist, -sampleSize*dist);

    for (int i = 0; i < 2*sampleSize; i++) {
        for (int j = 0; j < 2*sampleSize; j++) {
            for (int k = 0; k < 2*sampleSize; k++) {
                vec3 current = start + vec3(i * dist, j * dist, k * dist);

                if (-sphMap(current, sphere) < 0) {
                    actualNr += 1;

                    phantomNeighbors[actualNr-1].x = current;
                    phantomNeighbors[actualNr-1].h = 0.1;
                    phantomNeighbors[actualNr-1].v = vec3(0);
                    phantomNeighbors[actualNr-1].m = 0.005236;

                    phantomNeighbors[actualNr-1].rho = 1;
                    phantomNeighbors[actualNr-1].p = 0;

                    phantomNeighbors[actualNr-1].staticP = 1;
                    phantomNeighbors[actualNr-1].padding = 0;
                }
            }
        }
    }
}

//----------------------------------------------------------------------------------------------------------------------

// Constants
float m_k = 48.0 / (pow(SimProps.kernelh, 3) * PI);
float m_l = 1.0/(pow(SimProps.kernelh, 3)) * 3.0/(2.0*PI);

// Changed kernel to the CubicKernel by SPlisHSPHlasH:
// https://www.interactive-graphics.de/SPlisHSPlasH/doc/html/_s_p_h_kernels_8h_source.html
// (This is the one from the eurographics 2019 document, except now i finally understand their gradient notation)
vec3 gradKernel(vec3 i, vec3 j) {
    vec3 r = i - j;
    float rlength = length(r);
    float q = rlength / SimProps.kernelh;
    vec3 ret = vec3(0);

    if (q > 0.0001 && q <= 1.0) {
        vec3 gradq = r / (rlength * SimProps.kernelh);

        if (q <= 0.5) {
            ret = m_k * q * (3.0 * q - 2) * gradq;
        } else {
            float factor = 1.0 - q;
            ret = m_k * (-factor * factor) * gradq;
        }
    }

    return ret;

    /*vec3 r = i - j;
    float rlength = length(r);
    float q = rlength / SimProps.kernelh;
    vec3 ret = vec3(0);

    if (q > 0.0001 && q <= 2.0) {
        vec3 gradq = r / (rlength * SimProps.kernelh);

        if (q <= 1.0) {
            ret = m_l * q * (-2.0 + q * 3.0/2.0) * gradq;
        } else {
            float factor = 2.0 - q;
            ret = m_l/2.0 * (-factor * factor) * gradq;
        }
    }

    return ret;*/
}

void copyData(uint gID) {
    storage_out.p[gID].x = storage_in.p[gID].x;
    storage_out.p[gID].h = storage_in.p[gID].h;
    storage_out.p[gID].v = storage_in.p[gID].v;
    storage_out.p[gID].m = storage_in.p[gID].m;

    storage_out.p[gID].rho = storage_in.p[gID].rho;
    storage_out.p[gID].p = storage_in.p[gID].p;

    storage_out.p[gID].staticP = storage_in.p[gID].staticP;
    storage_out.p[gID].padding = 1;
}

void iterate(uint i) {
    //getNeighbours(storage_in.p[i]);
    vec3 pressure = vec3(0);
    vec3 viscosity = vec3(0);

    for (int j = 0; j < SimProps.nr_of_particles; j++) {
        if (i == j)
            continue;

        // Note to self: as the particles get further and further from each other the density decreases which means rho --> 0
        // which leads to something/0^2, which is either inf or -inf ----> nan or -nan
        float val = 0;
        if (storage_in.p[j].rho != 0 && storage_in.p[i].rho != 0)
            val = storage_in.p[j].m * ((storage_in.p[i].p / pow(storage_in.p[i].rho, 2)) + (storage_in.p[j].p / pow(storage_in.p[j].rho, 2)));

        vec3 k = gradKernel(storage_in.p[i].x, storage_in.p[j].x);
        pressure += val * gradKernel(storage_in.p[i].x, storage_in.p[j].x);

        vec3 xij = storage_in.p[i].x - storage_in.p[j].x;

        float pval = 0;
        if (storage_in.p[j].rho != 0)
            pval = (storage_in.p[j].m / storage_in.p[j].rho) * (dot(xij, gradKernel(storage_in.p[i].x, storage_in.p[j].x)) /  (dot(xij, xij) + 0.01 * SimProps.kernelh));

        vec3 vij = storage_in.p[i].v - storage_in.p[j].v;
        viscosity += pval * vij;
    }

    // Phantom neighbours
    /*for (int j = 0; j < actualNr; j++) {
        float val = 0;
        if (phantomNeighbors[j].rho != 0 && storage_in.p[i].rho != 0)
            val = phantomNeighbors[j].m * ((storage_in.p[i].p / pow(storage_in.p[i].rho, 2)) + (phantomNeighbors[j].p / pow(phantomNeighbors[j].rho, 2)));

        vec3 k = gradKernel(storage_in.p[i].x, phantomNeighbors[j].x);
        pressure += val * gradKernel(storage_in.p[i].x, phantomNeighbors[j].x);

        vec3 xij = storage_in.p[i].x - phantomNeighbors[j].x;

        float pval = 0;
        if (phantomNeighbors[j].rho != 0)
            pval = (storage_in.p[j].m / phantomNeighbors[j].rho) * (dot(xij, gradKernel(storage_in.p[i].x, phantomNeighbors[j].x)) /  (dot(xij, xij) + 0.01 * SimProps.kernelh));

        vec3 vij = storage_in.p[i].v - storage_in.p[j].v;
        viscosity += pval * vij;
    }*/

    pressure *= -storage_in.p[i].m;

    float nu = 0.01;
    //float nu = 0;
    viscosity *= 2 * nu * storage_in.p[i].m;
    //pressure *= 0.1;

    vec3 gravity = vec3(0, 0, -9.81) * storage_in.p[i].m;
    
    vec3 acc = (pressure + viscosity + gravity) / storage_in.p[i].m;

    float dt = 0.01;
    vec3 viNext = storage_in.p[i].v;
    vec3 xiNext = storage_in.p[i].x;
    viNext += acc * dt;

    float vil = length(viNext);
    /*if (vil > 5) {
        viNext /= vil;
        viNext *= 1.1;
    }*/

    xiNext += viNext * dt;
    
    storage_out.p[i].x = xiNext;
    storage_out.p[i].v = viNext;
    storage_out.p[i].rho = storage_in.p[i].rho;
    storage_out.p[i].p = storage_in.p[i].p;
}

void main() {
    uint gID = gl_GlobalInvocationID.x;

    if (gID < SimProps.nr_of_particles) {
        copyData(gID);
        if (storage_in.p[gID].staticP == 0)
            iterate(gID);
    }
}