#version 450
layout (local_size_x = 64) in; //256

#include comp_shader.incl

//----------------------------------------------------------------------------------------------------------------------

void copyData(uint gID) {
    out_data.p[gID].x = in_data.p[gID].x;
    out_data.p[gID].h = in_data.p[gID].h;
    out_data.p[gID].v = in_data.p[gID].v;
    out_data.p[gID].m = in_data.p[gID].m;

    out_data.p[gID].rho = in_data.p[gID].rho;
    out_data.p[gID].p = in_data.p[gID].p;

    out_data.p[gID].staticP = in_data.p[gID].staticP;
    out_data.p[gID].padding = in_data.p[gID].padding;
}

void computePredictedRho(uint gID) {
    float density = 0;
    float real_density = 0;

    for (int j = 0; j < ubo.nr_of_particles; j++) {
        if (j == gID) continue;

        density += in_data.p[j].m * cs_kernel(pcisph_add_data.p[gID].pred_pos, pcisph_add_data.p[j].pred_pos);
        real_density += in_data.p[j].m * cs_kernel(in_data.p[gID].x, in_data.p[j].x);
    }

    pcisph_add_data.p[gID].rho_pred = density;
    out_data.p[gID].rho = real_density;

    // Pressure init
    out_data.p[gID].p = ubo.kPCI * ((density - ubo.desired_density)/ubo.desired_density);
}

void main()
{
    //grab global ID
    uint gID = gl_GlobalInvocationID.x;

    if (gID < ubo.nr_of_particles) {
        copyData(gID);
        computePredictedRho(gID);
    }
}