#version 450
layout (local_size_x = 64) in; //256

#include comp_shader.incl

#define storage_in out_data
#define storage_out in_data
#define SimProps ubo

//----------------------------------------------------------------------------------------------------------------------

void updateDensityAndPressure(uint gID) {
    float rho_change = 0;

    if (!ubo.neighbour) {
        for (int j = 0; j < ubo.nr_of_particles; j++) {
            if (j == gID) continue;

            rho_change += storage_in.p[j].m * dot((ubo.dt * pcisph_add_data.p[gID].prev_p_acc - ubo.dt * pcisph_add_data.p[j].prev_p_acc), cs_gradKernel(storage_in.p[gID].x, storage_in.p[j].x));
        }
    } else {
        vec3 tuple = determineGridTuple(int(gID), true);
        Neighbourhood n = getNeighbouringCells(tuple);
        for (int i = 0; i < 27; i++) {
            vec3 current = n.neighbour[i];
            if (!checkBounds(current)) continue;

            int idx = getStartIdxOfCell(current);
            if (idx >= 0) {
                int size = grid_data.numbers[idx];

                int iterIdx = 0;
                for (int j = 1; j < size+1; j++) {
                    iterIdx = grid_data.numbers[idx + j];
                    if (gID == iterIdx) continue;

                    rho_change += storage_in.p[iterIdx].m * dot((ubo.dt * pcisph_add_data.p[gID].prev_p_acc - ubo.dt * pcisph_add_data.p[iterIdx].prev_p_acc), cs_gradKernel(storage_in.p[gID].x, storage_in.p[iterIdx].x));
                }
            }
        }
    }

    pcisph_add_data.p[gID].padding1 = 0.0f;
    pcisph_add_data.p[gID].padding2 = 0.0f;

    rho_change *= ubo.dt;
    pcisph_add_data.p[gID].rho_pred += rho_change;

    float pred = pcisph_add_data.p[gID].rho_pred;
    pcisph_add_data.p[gID].rho_pred = pred < ubo.desired_density ? ubo.desired_density : pred;

    storage_in.p[gID].rho = pcisph_add_data.p[gID].rho_pred;
    storage_in.p[gID].p += ubo.kPCI * 1000.0f * ((storage_in.p[gID].rho - ubo.desired_density)/ubo.desired_density);
    storage_in.p[gID].p = storage_in.p[gID].p < 0 ? 0 : storage_in.p[gID].p;
}

void main()
{
    //grab global ID
    uint gID = gl_GlobalInvocationID.x;

    if (gID < ubo.nr_of_particles) {
        updateDensityAndPressure(gID);
    }
}