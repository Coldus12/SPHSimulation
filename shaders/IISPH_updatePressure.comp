#version 450
layout (local_size_x = 256) in; //256

#include comp_shader.incl

struct Additional_data {
    vec3 dii;
    float aii;
    vec3 sumDijPj;
    float rho_adv;
    vec3 v_adv;
    float rho_pred;
};

layout(set = 0, binding = 4, std430) buffer additionalDataBuffer {
    Additional_data p[];
} add_data;

//----------------------------------------------------------------------------------------------------------------------

void updatePressure(uint gID) {
    float dt = 0.01;
    float sum = 0;
    float omega = 0.5;

    // TODO updating p of input data, while also using p of input data!!!!!!!
    for (int j = 0; j < ubo.nr_of_particles; j++) {
        if (gID == j)
            continue;

        vec3 dji = vec3(0);
        if (abs(in_data.p[gID].rho) > 0.0001)
            dji = -dt * dt * in_data.p[gID].m / (in_data.p[gID].rho * in_data.p[gID].rho) * cs_gradKernel(in_data.p[j].x, in_data.p[gID].x);

        sum += in_data.p[j].m * dot(add_data.p[gID].sumDijPj - add_data.p[j].dii * in_data.p[j].p - (add_data.p[j].sumDijPj - dji * in_data.p[gID].p), cs_gradKernel(in_data.p[gID].x, in_data.p[j].x));
    }

    add_data.p[gID].rho_pred = add_data.p[gID].rho_adv + in_data.p[gID].p * add_data.p[gID].aii + sum;
    if (abs(add_data.p[gID].aii) > 0.00001) {
        in_data.p[gID].p = (1 - omega) * in_data.p[gID].p + (omega / add_data.p[gID].aii) * (ubo.desired_density - add_data.p[gID].rho_adv - sum);
        out_data.p[gID].p = (1 - omega) * in_data.p[gID].p + (omega / add_data.p[gID].aii) * (ubo.desired_density - add_data.p[gID].rho_adv - sum);
    } else {
        in_data.p[gID].p = 0;
        out_data.p[gID].p = 0;
    }
}

void main()
{
    //grab global ID
    uint gID = gl_GlobalInvocationID.x;

    if (gID < ubo.nr_of_particles) {
        updatePressure(gID);
    }
}