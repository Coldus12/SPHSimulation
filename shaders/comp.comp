#version 450
layout (local_size_x = 1) in;
precision highp float;

#define PI 3.1415926538

struct Particle {
    vec3 x;                     // position
    float h;                    // radius
    vec3 v;                     // velocity
    float m;                    // mass

    float rho;                  // density
    float p;                    // pressure

    float staticP;               // is particle static
    float padding;
};

layout(set = 0, binding = 0) uniform UBO {
    float desired_density;
    float k;                    // normalization constant / stiffness constant
    float nr_of_particles;
    float kernelh;
} ubo;

layout(set = 0, binding = 1, std430)  buffer inBuffer {
    Particle p[];
} in_data;

layout(set = 0, binding = 2, std430) buffer outBuffer {
    Particle p[];
} out_data;

                             // SDF stuff
//----------------------------------------------------------------------------------------------------------------------

vec4 sphere = vec4(0,0,-0.2,1);
Particle phantomNeighbors[64];
int actualNr = 0;
int sampleSize = 4;

// Returns smallest distance to sphere s
float sphMap(vec3 p, vec4 s) {
    float d = distance(p, s.xyz) - s.w;
    return d;
}

vec3 getClosestPoint(vec3 particlePos) {
    float d = sphMap(particlePos, sphere);
    return (sphere.xyz - particlePos) * d;
}

void getNeighbours(Particle p) {
    vec3 closestP = getClosestPoint(p.x);
    float dist = 0.1;
    vec3 start = closestP - vec3(-sampleSize*dist,-sampleSize*dist, -sampleSize*dist);

    for (int i = 0; i < 2*sampleSize; i++) {
        for (int j = 0; j < 2*sampleSize; j++) {
            for (int k = 0; k < 2*sampleSize; k++) {
                vec3 current = start + vec3(i * dist, j * dist, k * dist);

                if (-sphMap(current, sphere) < 0) {
                    actualNr += 1;

                    phantomNeighbors[actualNr-1].x = current;
                    phantomNeighbors[actualNr-1].h = 0.1;
                    phantomNeighbors[actualNr-1].v = vec3(0);
                    phantomNeighbors[actualNr-1].m = 0.005236;

                    phantomNeighbors[actualNr-1].rho = 1;
                    phantomNeighbors[actualNr-1].p = 0;

                    phantomNeighbors[actualNr-1].staticP = 1;
                    phantomNeighbors[actualNr-1].padding = 0;
                }
            }
        }
    }
}

//----------------------------------------------------------------------------------------------------------------------

float kernel(vec3 i, vec3 j) {
    float q = length(i - j) / ubo.kernelh;
    float oneoverhd = 1.0/(pow(ubo.kernelh, 3));
    float val = 0;

    if (0 <= q && q < 1) {
        val = 2.0/3.0 - pow(q, 2) + pow(q,3)/2;
        //val = 6 * (pow(q, 3) - pow(q, 2)) + 1;
    } else if (1 <= q && q < 2) {
        val = pow(2-q, 3)/6.0;
        //val = 2 * pow(1 - q, 3);
    } else {
        val = 0;
    }

    val *= 3.0/(2.0*PI);
    //val *= 8.0 / (PI * pow(ubo.kernelh, 3));
    val *= oneoverhd;

    if (val < 0.001)
        val = 0;

    return val;
}

void copyData(uint gID) {
    out_data.p[gID].x = in_data.p[gID].x;
    out_data.p[gID].h = in_data.p[gID].h;
    out_data.p[gID].v = in_data.p[gID].v;
    out_data.p[gID].m = in_data.p[gID].m;

    out_data.p[gID].rho = in_data.p[gID].rho;
    out_data.p[gID].p = in_data.p[gID].p;

    out_data.p[gID].staticP = in_data.p[gID].staticP;
    out_data.p[gID].padding = 1;
}

void calculateRhoAndP(uint gID) {
    float density = 0.0;
    //getNeighbours(in_data.p[gID]);

    for (int j = 0; j < ubo.nr_of_particles; j++) {
        if (gID == j)
            continue;

        density += in_data.p[gID].m * kernel(in_data.p[gID].x, in_data.p[j].x);
    }

    /*for (int j = 0; j < actualNr; j++) {
        density += in_data.p[gID].m * kernel(in_data.p[gID].x, phantomNeighbors[j].x);
    }*/

    out_data.p[gID].rho = density;

    float ratio = density / ubo.desired_density;
    out_data.p[gID].p = 0.1 * (pow(ratio, 7) - 1.0);
    //out_data.p[gID].p = 0.001 * (pow(ratio, 7) - 1.0);
}

void main()
{
    //grab global ID
    uint gID = gl_GlobalInvocationID.x;

    if (gID < ubo.nr_of_particles) {
        copyData(gID);
        calculateRhoAndP(gID);
    }
}