#version 450
layout (local_size_x = 256) in;

#include comp_shader.incl

//----------------------------------------------------------------------------------------------------------------------

float m_k = 8.0 / (PI * pow(ubo.kernelh, 3));
float m_l = 1.0/(pow(ubo.kernelh, 3)) * 3.0/(2.0*PI);

float kernel(vec3 i, vec3 j) {
    float q = length(i - j) / ubo.kernelh;


    float ret = 0;
    if (q <= 1.0) {
        if (q <= 0.5) {
            ret = m_k * (6.0 * (pow(q, 3.0) - pow(q, 2.0)) + 1.0);
        } else {
            ret = m_k * (2.0 * pow(1 - q, 3));
        }
    }

    return ret;
}

void copyData(uint gID) {
    out_data.p[gID].x = in_data.p[gID].x;
    out_data.p[gID].h = in_data.p[gID].h;
    out_data.p[gID].v = in_data.p[gID].v;
    out_data.p[gID].m = in_data.p[gID].m;

    out_data.p[gID].rho = in_data.p[gID].rho;
    out_data.p[gID].p = in_data.p[gID].p;

    out_data.p[gID].staticP = in_data.p[gID].staticP;
    out_data.p[gID].padding = 1;
}

void calculateRhoAndP(uint gID) {
    float density = 0.0;

    /*for (int j = 0; j < ubo.nr_of_particles; j++) {
        if (gID == j)
            continue;

        density += in_data.p[gID].m * kernel(in_data.p[gID].x, in_data.p[j].x);
    }*/

    vec3 tuple = determineGridTuple(int(gID));
    Neighbourhood n = getNeighbouringCells(tuple);
    for (int i = 0; i < 27; i++) {
        vec3 current = n.neighbour[i];
        if (!checkBounds(current)) continue;

        int size = grid_data.numbers[getStartIdxOfCell(current)];
        int iterIdx = 0;
        for (int j = 1; j < size; j++) {
            iterIdx = grid_data.numbers[j];
            if (gID == iterIdx) continue;

            density += in_data.p[gID].m * kernel(in_data.p[gID].x, in_data.p[iterIdx].x);
        }
    }

    out_data.p[gID].rho = density;

    float ratio = density / ubo.desired_density;
    float p = 0.001 * (pow(ratio, 7) - 1.0);
    out_data.p[gID].p = p < 0 ? 0 : p;
}

void main()
{
    //grab global ID
    uint gID = gl_GlobalInvocationID.x;

    if (gID < ubo.nr_of_particles) {
        copyData(gID);
        calculateRhoAndP(gID);
    }
}