#version 450
layout (local_size_x = 64) in; //256

#include comp_shader.incl

#define storage_in out_data
#define storage_out in_data
#define SimProps ubo

#define vbound 6

/*#define bottom -0.3
#define left -2.0
#define right 1.0
#define front 1.0
#define back -1.0*/

// Solid environment as function?
//----------------------------------------------------------------------------------------------------------------------
void container(uint idx) {
    float left = (SimProps.gridA.x < SimProps.gridB.x ? SimProps.gridA.x : SimProps.gridB.x) + 0.1;
    float right = (SimProps.gridA.x > SimProps.gridB.x ? SimProps.gridA.x : SimProps.gridB.x) - 0.1;

    float front = (SimProps.gridA.y > SimProps.gridB.y ? SimProps.gridA.y : SimProps.gridB.y) - 0.1;
    float back = (SimProps.gridA.y < SimProps.gridB.y ? SimProps.gridA.y : SimProps.gridB.y) + 0.1;

    float bottom = (SimProps.gridA.z < SimProps.gridB.z ? SimProps.gridA.z : SimProps.gridB.z) + 0.1;
    //float bottom = -0.1;

    // Bottom
    if (storage_out.p[idx].x.z <= bottom) {
        storage_out.p[idx].x.z = bottom;
        storage_out.p[idx].v.z = -storage_out.p[idx].v.z;
    }

    // Left
    if (storage_out.p[idx].x.x <= left) {
        storage_out.p[idx].x.x = left;
        storage_out.p[idx].v.x = -storage_out.p[idx].v.x;
    }

    // Right
    if (storage_out.p[idx].x.x >= right) {
        storage_out.p[idx].x.x = right;
        storage_out.p[idx].v.x = -storage_out.p[idx].v.x;
    }

    // Front
    if (storage_out.p[idx].x.y >= front) {
        storage_out.p[idx].x.y = front;
        storage_out.p[idx].v.y = -storage_out.p[idx].v.y;
    }

    // Back
    if (storage_out.p[idx].x.y <= back) {
        storage_out.p[idx].x.y = back;
        storage_out.p[idx].v.y = -storage_out.p[idx].v.y;
    }
}

//----------------------------------------------------------------------------------------------------------------------

vec3 speedBound(vec3 velocity) {
    if (velocity.x < -vbound) velocity.x = 0.1 * -vbound;
    if (velocity.x > vbound) velocity.x = 0.1 * vbound;

    if (velocity.y < -vbound) velocity.y = 0.1 * -vbound;
    if (velocity.y > vbound) velocity.y = 0.1 * vbound;

    if (velocity.z < -vbound) velocity.z = 0.1 * -vbound;
    if (velocity.z > vbound) velocity.z = 0.1 * vbound;

    return velocity;
}

//----------------------------------------------------------------------------------------------------------------------

void copyData(uint gID) {
    storage_out.p[gID].x = storage_in.p[gID].x;
    storage_out.p[gID].h = storage_in.p[gID].h;
    storage_out.p[gID].v = storage_in.p[gID].v;
    storage_out.p[gID].m = storage_in.p[gID].m;

    storage_out.p[gID].rho = storage_in.p[gID].rho;
    storage_out.p[gID].p = storage_in.p[gID].p;

    storage_out.p[gID].staticP = storage_in.p[gID].staticP;
    storage_out.p[gID].padding = storage_in.p[gID].padding;
}

void iterate(uint gID) {
    vec3 pressure = vec3(0);
    vec3 viscosity = vec3(0);

    float dpi = 0;
    if (storage_in.p[gID].rho != 0)
        dpi = storage_in.p[gID].p / (storage_in.p[gID].rho * storage_in.p[gID].rho);

    // Original
    if (!ubo.neighbour) {
        for (int j = 0; j < SimProps.nr_of_particles; j++) {
            if (gID == j)
                continue;

            if (storage_in.p[gID].staticP == 0) {
                float dpj = 0;
                if (storage_in.p[j].rho != 0)
                dpj = storage_in.p[j].p / (storage_in.p[j].rho * storage_in.p[j].rho);

                pressure -= storage_in.p[j].m * (dpi + dpj) * cs_gradKernel(storage_in.p[gID].x, storage_in.p[j].x);

                float pval = 0;
                if (storage_in.p[j].rho != 0)
                pval = (storage_in.p[j].m / storage_in.p[j].rho) * 1.0/SimProps.dt * 0.05 * cs_kernel(storage_in.p[gID].x, storage_in.p[j].x);

                vec3 vij = storage_in.p[gID].v - storage_in.p[j].v;
                viscosity -= pval * vij;
            } else {
                pressure -= storage_in.p[j].m * dpi * cs_gradKernel(storage_in.p[gID].x, storage_in.p[j].x);
            }
        }
    } else {
        // Neighbourhood
        vec3 tuple = determineGridTuple(int(gID), false);
        Neighbourhood n = getNeighbouringCells(tuple);
        for (int i = 0; i < 27; i++) {
            vec3 current = n.neighbour[i];
            if (!checkBounds(current)) continue;

            int idx = getStartIdxOfCell(current);
            if (idx >= 0) {
                int size = grid_data.numbers[idx];

                int iterIdx = 0;
                for (int j = 1; j < size + 1; j++) {
                    iterIdx = grid_data.numbers[idx + j];
                    if (gID == iterIdx) continue;

                    if (storage_in.p[gID].staticP == 0) {
                        float dpj = 0;
                        if (storage_in.p[iterIdx].rho != 0)
                        dpj = storage_in.p[iterIdx].p / (storage_in.p[iterIdx].rho * storage_in.p[iterIdx].rho);

                        pressure -= storage_in.p[iterIdx].m * (dpi + dpj) * cs_gradKernel(storage_in.p[gID].x, storage_in.p[iterIdx].x);

                        float pval = 0;
                        if (storage_in.p[iterIdx].rho != 0)
                        pval = (storage_in.p[iterIdx].m / storage_in.p[iterIdx].rho) * 1.0/SimProps.dt * 0.05 * cs_kernel(storage_in.p[gID].x, storage_in.p[iterIdx].x);

                        vec3 vij = storage_in.p[gID].v - storage_in.p[iterIdx].v;
                        viscosity -= pval * vij;
                    } else {
                        pressure -= storage_in.p[iterIdx].m * dpi * cs_gradKernel(storage_in.p[gID].x, storage_in.p[iterIdx].x);
                    }
                }
            }
        }
    }

    vec3 gravity = vec3(0, 0, -9.81) * storage_in.p[gID].m;
    
    vec3 acc = (pressure + viscosity + gravity) / storage_in.p[gID].m;

    vec3 viNext = storage_in.p[gID].v;
    vec3 xiNext = storage_in.p[gID].x;
    viNext += acc * SimProps.dt;
    viNext = speedBound(viNext);
    xiNext += viNext * SimProps.dt;
    
    storage_out.p[gID].x = xiNext;
    storage_out.p[gID].v = viNext;
    storage_out.p[gID].rho = storage_in.p[gID].rho;
    storage_out.p[gID].p = storage_in.p[gID].p;

    container(gID);
}

void main() {
    uint gID = gl_GlobalInvocationID.x;

    if (gID < SimProps.nr_of_particles) {
        copyData(gID);
        if (storage_in.p[gID].staticP == 0)
            iterate(gID);
    }
}