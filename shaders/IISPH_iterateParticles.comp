#version 450
layout (local_size_x = 128) in; //256

#include comp_shader.incl

#define storage_in out_data
#define storage_out in_data
#define SimProps ubo

struct Additional_data {
    vec3 dii;
    float aii;
    vec3 sumDijPj;
    float rho_adv;
    vec3 v_adv;
    float rho_pred;
};

layout(set = 0, binding = 4, std430) buffer additionalDataBuffer {
    Additional_data p[];
} add_data;

#define vbound 6

/*#define bottom -0.3
#define left -2.0
#define right 1.0
#define front 1.0
#define back -1.0*/

// Solid environment as function?
//----------------------------------------------------------------------------------------------------------------------
void container(uint idx) {
    float left = (SimProps.gridA.x < SimProps.gridB.x ? SimProps.gridA.x : SimProps.gridB.x) + 0.1;
    float right = (SimProps.gridA.x > SimProps.gridB.x ? SimProps.gridA.x : SimProps.gridB.x) - 0.1;

    float front = (SimProps.gridA.y > SimProps.gridB.y ? SimProps.gridA.y : SimProps.gridB.y) - 0.1;
    float back = (SimProps.gridA.y < SimProps.gridB.y ? SimProps.gridA.y : SimProps.gridB.y) + 0.1;

    float bottom = (SimProps.gridA.z < SimProps.gridB.z ? SimProps.gridA.z : SimProps.gridB.z) + 0.1;
    //float bottom = -0.1;

    // Bottom
    if (storage_out.p[idx].x.z <= bottom) {
        storage_out.p[idx].x.z = bottom;
        storage_out.p[idx].v.z = -storage_out.p[idx].v.z;
    }

    // Left
    if (storage_out.p[idx].x.x <= left) {
        storage_out.p[idx].x.x = left;
        storage_out.p[idx].v.x = -storage_out.p[idx].v.x;
    }

    // Right
    if (storage_out.p[idx].x.x >= right) {
        storage_out.p[idx].x.x = right;
        storage_out.p[idx].v.x = -storage_out.p[idx].v.x;
    }

    // Front
    if (storage_out.p[idx].x.y >= front) {
        storage_out.p[idx].x.y = front;
        storage_out.p[idx].v.y = -storage_out.p[idx].v.y;
    }

    // Back
    if (storage_out.p[idx].x.y <= back) {
        storage_out.p[idx].x.y = back;
        storage_out.p[idx].v.y = -storage_out.p[idx].v.y;
    }
}

//----------------------------------------------------------------------------------------------------------------------

vec3 speedBound(vec3 velocity) {
    if (velocity.x < -vbound) velocity.x = 0.1 * -vbound;
    if (velocity.x > vbound) velocity.x = 0.1 * vbound;

    if (velocity.y < -vbound) velocity.y = 0.1 * -vbound;
    if (velocity.y > vbound) velocity.y = 0.1 * vbound;

    if (velocity.z < -vbound) velocity.z = 0.1 * -vbound;
    if (velocity.z > vbound) velocity.z = 0.1 * vbound;

    return velocity;
}

//----------------------------------------------------------------------------------------------------------------------

void copyData(uint gID) {
    storage_out.p[gID].x = storage_in.p[gID].x;
    storage_out.p[gID].h = storage_in.p[gID].h;
    storage_out.p[gID].v = storage_in.p[gID].v;
    storage_out.p[gID].m = storage_in.p[gID].m;

    storage_out.p[gID].rho = storage_in.p[gID].rho;
    storage_out.p[gID].p = storage_in.p[gID].p;

    storage_out.p[gID].staticP = storage_in.p[gID].staticP;
    storage_out.p[gID].padding = storage_in.p[gID].padding;
}

void iterate(uint gID) {
    vec3 pressure = vec3(0);
    vec3 viscosity = vec3(0);

    // Original
    for (int j = 0; j < SimProps.nr_of_particles; j++) {
        if (gID == j)
            continue;

        // Note to self: as the particles get further and further from each other the density decreases which means rho --> 0
        // which leads to something/0^2, which is either inf or -inf ----> nan or -nan
        float val = 0;
        if (storage_in.p[j].rho != 0 && storage_in.p[gID].rho != 0)
            val = storage_in.p[j].m * ((storage_in.p[gID].p / pow(storage_in.p[gID].rho, 2)) + (storage_in.p[j].p / pow(storage_in.p[j].rho, 2)));

        vec3 k = cs_gradKernel(storage_in.p[gID].x, storage_in.p[j].x);
        pressure += val * cs_gradKernel(storage_in.p[gID].x, storage_in.p[j].x);
    }

    pressure *= -storage_in.p[gID].m;

    vec3 acc = (pressure) / storage_in.p[gID].m;

    float dt = 0.01;
    vec3 viNext = storage_in.p[gID].v;
    vec3 xiNext = storage_in.p[gID].x;
    viNext = add_data.p[gID].v_adv + acc * dt;
    viNext = speedBound(viNext);

    xiNext += viNext * dt;

    storage_out.p[gID].x = xiNext;
    storage_out.p[gID].v = viNext;
    storage_out.p[gID].rho = storage_in.p[gID].rho;
    storage_out.p[gID].p = storage_in.p[gID].p;

    container(gID);
}

void main() {
    uint gID = gl_GlobalInvocationID.x;

    if (gID < SimProps.nr_of_particles) {
        copyData(gID);
        if (storage_in.p[gID].staticP == 0)
        iterate(gID);
    }
}