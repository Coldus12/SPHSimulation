#version 450
layout (local_size_x = 64) in; //256

#include comp_shader.incl

//----------------------------------------------------------------------------------------------------------------------

void computeAdvectedVelocity(uint gID) {
    // Forces
    vec3 f = vec3(0);

    // Calculating viscosity
    vec3 viscosity = vec3(0);

    if (!ubo.neighbour) {
        for (int j = 0; j < ubo.nr_of_particles; j++) {
            if (gID == j)
            continue;

            float pval = 0;
            if (in_data.p[j].rho != 0)
                pval = (in_data.p[j].m / in_data.p[j].rho) * 1.0/ubo.dt * 0.05 * cs_kernel(in_data.p[gID].x, in_data.p[j].x);

            vec3 vij = in_data.p[gID].v - in_data.p[j].v;
            viscosity -= pval * vij;
        }
    } else {
        vec3 tuple = determineGridTuple(int(gID), false);
        Neighbourhood n = getNeighbouringCells(tuple);
        for (int i = 0; i < 27; i++) {
            vec3 current = n.neighbour[i];
            if (!checkBounds(current)) continue;

            int idx = getStartIdxOfCell(current);
            if (idx >= 0) {
                int size = grid_data.numbers[idx];

                int iterIdx = 0;
                for (int j = 1; j < size + 1; j++) {
                    iterIdx = grid_data.numbers[idx + j];
                    if (gID == iterIdx) continue;

                    float pval = 0;
                    if (in_data.p[iterIdx].rho != 0)
                        pval = (in_data.p[iterIdx].m / in_data.p[iterIdx].rho) * 1.0/ubo.dt * 0.05 * cs_kernel(in_data.p[gID].x, in_data.p[iterIdx].x);

                    vec3 vij = in_data.p[gID].v - in_data.p[iterIdx].v;
                    viscosity -= pval * vij;

                }
            }
        }
    }

    if (in_data.p[gID].staticP == 0)
        f += viscosity;

    // Gravity
    f += vec3(0, 0, -9.81 * in_data.p[gID].m);

    // Calculating v_adv
    pcisph_add_data.p[gID].v_adv = in_data.p[gID].v + ubo.dt * f / in_data.p[gID].m;
    pcisph_add_data.p[gID].pred_pos = in_data.p[gID].x + ubo.dt * (pcisph_add_data.p[gID].v_adv + pcisph_add_data.p[gID].prev_p_acc * ubo.dt);
}

void main()
{
    //grab global ID
    uint gID = gl_GlobalInvocationID.x;

    if (gID < ubo.nr_of_particles) {
        computeAdvectedVelocity(gID);
    }
}