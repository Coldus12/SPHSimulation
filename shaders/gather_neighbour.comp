#version 450
layout (local_size_x = 64) in;

#include comp_shader.incl

void gatherNeighbours(uint gID) {
    int startIdx = nb_nr * int(gID);
    int neighbour_nr = 1;

    vec3 tuple = determineGridTuple(int(gID), true);
    Neighbourhood n = getNeighbouringCells(tuple);
    for (int i = 0; i < 27; i++) {
        vec3 current = n.neighbour[i];
        if (!checkBounds(current)) continue;

        int idx = getStartIdxOfCell(current);
        if (idx >= 0) {
            int size = grid_data.numbers[idx];

            int iterIdx = 0;
            for (int j = 1; j < size+1; j++) {
                iterIdx = grid_data.numbers[idx + j];
                if (gID == iterIdx) continue;

                neighbour_data.numbers[startIdx + neighbour_nr] = iterIdx;
                neighbour_nr++;
            }
        }
    }

    neighbour_data.numbers[startIdx] = neighbour_nr;
}

// Main
//----------------------------------------------------------------------------------------------------------------------
void main()
{
    //grab global ID
    uint gID = gl_GlobalInvocationID.x;

    if (gID < ubo.nr_of_particles) {
        gatherNeighbours(gID);
    }
}