precision highp float;

#define PI 3.1415926538

// Hashing constants
#define H1 73856093
#define H2 19349663
#define H3 83492791

#define list_size 25

struct Particle {
    vec3 x;                     // position
    float h;                    // radius
    vec3 v;                     // velocity
    float m;                    // mass

    float rho;                  // density
    float p;                    // pressure

    float staticP;               // is particle static
    float padding;
};

// SSBOs
//----------------------------------------------------------------------------------------------------------------------
layout(set = 0, binding = 0) uniform UBO {
    float desired_density;
    float k;                    // normalization constant / stiffness constant
    float nr_of_particles;
    float kernelh;

    float dt;
    float kPCI;
    float padding1;
    float padding2;

    vec4 gridA;
    vec4 gridB;
} ubo;

layout(set = 0, binding = 1, std430)  buffer inBuffer {
    Particle p[];
} in_data;

layout(set = 0, binding = 2, std430) buffer outBuffer {
    Particle p[];
} out_data;

layout(set = 0, binding = 3, std430) buffer gridBuffer {
    int numbers[];
} grid_data;

// IISPH additional data
//----------------------------
struct IISPH_Additional_data {
    vec3 dii;
    float aii;
    vec3 sumDijPj;
    float rho_adv;
    vec3 v_adv;
    float rho_pred;
};

layout(set = 0, binding = 4, std430) buffer additionalDataBuffer1 {
        IISPH_Additional_data p[];
} iisph_add_data;

// PCISPH additional data
//----------------------------
struct PCISPH_Additional_data {
    vec3 v_adv;
    float rho_pred;
    vec3 pred_pos;
    float padding1;
    vec3 prev_p_acc;
    float padding2;
};

layout(set = 0, binding = 5, std430) buffer additionalDataBuffer2 {
        PCISPH_Additional_data p[];
} pcisph_add_data;

// Kernels
//----------------------------------------------------------------------------------------------------------------------

// Cubic spline kernel
//----------------------------
// Changed kernel to the CubicKernel by SPlisHSPHlasH:
// https://www.interactive-graphics.de/SPlisHSPlasH/doc/html/_s_p_h_kernels_8h_source.html
// (This is the one from the eurographics 2019 document, except now i finally understand their gradient notation)
float cs_kernel(vec3 i, vec3 j) {
    float m_k = 8.0 * 6.0 / (PI * pow(ubo.kernelh, 3));
    float m_l = 48.0 * 6.0 / (PI * pow(ubo.kernelh, 3));

    float q = length(i - j) / ubo.kernelh;

    float ret = 0;
    if (q <= 1.0) {
        if (q <= 0.5) {
            ret = m_k * ( 6.0 * (pow(q, 3.0) - pow(q, 2.0)) + 1.0);
        } else {
            ret = m_k * (2.0 * pow(1 - q, 3));
        }
    }

    return ret;
}

// Cubic spline gradkernel
//----------------------------
vec3 cs_gradKernel(vec3 i, vec3 j) {
    float m_k = 8.0 * 6.0 / (PI * pow(ubo.kernelh, 3));
    float m_l = 48.0 * 6.0 / (PI * pow(ubo.kernelh, 3));

    vec3 r = i - j;
    float rlength = length(r);
    float q = rlength / ubo.kernelh;
    vec3 ret = vec3(0);

    if (q > 0.0001 && q <= 1) {
        vec3 gradq = r / (rlength * ubo.kernelh);

        if (q <= 0.5) {
            ret = m_l * q * (3.0 * q - 2) * gradq;
        } else {
            float factor = 1.0 - q;
            ret = m_l * (-factor * factor) * gradq;
        }
    }

    return ret;
}

// Quintic spline kernel
//----------------------------
float qs_kernel(vec3 i, vec3 j) {
    float q = length(i - j) / ubo.kernelh;

    float ret = 0;
    float alpha = 10.0 / (120.0 * PI * pow(ubo.kernelh,3.0));
    if (0 < q && q <= 3) {
        float q2 = q*q;
        float q3 = q2*q;

        float t1 = pow(1.0-q,5.0);
        float t2 = pow(2.0-q,5.0);
        float t3 = pow(3.0-q,5.0);

        if (q <= 1.0) {
            ret = t3 - 6.0*t2 + 15.0*t1;
        } else if (q <= 2.0) {
            ret = t3-6.0*t2;
        } else {
            ret = t3;
        }
    }

    ret *= alpha;

    return ret;
}

// Quintic spline gradkernel
//----------------------------
vec3 qs_gradKernel(vec3 i, vec3 j) {
    vec3 r = i - j;
    float rlength = length(r);
    float q = rlength / ubo.kernelh;
    vec3 ret = vec3(0);

    float t3 = -5.0 * pow(3.0-q,4.0);
    float t2 = 30.0 * pow(2.0-q,4.0);
    float t1 = -75.0 * pow(1.0-q,4.0);

    float alpha = 10.0 / (120.0 * PI * pow(ubo.kernelh,3.0));
    if (q > 0.0001 && q <= 3) {
        vec3 gradq = r / (rlength * ubo.kernelh);

        if (q <= 1.0) {
            ret = alpha * (t3 + t2 + t1) * gradq;
        } else if (q <= 2.0) {
            ret = alpha * (t3 + t2) * gradq;
        } else {
            ret = alpha * t3 * gradq;
        }
    }

    return ret;
}

// Neighbourhood stuff
//----------------------------------------------------------------------------------------------------------------------
struct Neighbourhood {
    vec3 neighbour[27]; // 3^3
};

int cellx = int(ceil(abs((ubo.gridB.x - ubo.gridA.x)/ubo.kernelh))); // Number of cells in x direction
int celly = int(ceil(abs((ubo.gridB.y - ubo.gridA.y)/ubo.kernelh))); // Number of cells in y direction
int cellz = int(ceil(abs((ubo.gridB.z - ubo.gridA.z)/ubo.kernelh))); // Number of cells in z direction

bool checkBounds(vec3 tuple) {
    if (tuple.x < 0 || tuple.x >= cellx)
        return false;

    if (tuple.y < 0 || tuple.y >= celly)
        return false;

    if (tuple.z < 0 || tuple.z >= cellz)
        return false;

    return true;
}

// inout
//    ->   true  -> in_data
//    ->   false -> out_data
vec3 determineGridTuple(int particleIdx, bool inOrOut) {
    vec3 ppos = vec3(0);

    if (inOrOut)
        ppos = in_data.p[particleIdx].x;
    else ppos = out_data.p[particleIdx].x;

    vec3 lower = vec3(
            ubo.gridA.x < ubo.gridB.x ? ubo.gridA.x : ubo.gridB.x,
            ubo.gridA.y < ubo.gridB.y ? ubo.gridA.y : ubo.gridB.y,
            ubo.gridA.z < ubo.gridB.z ? ubo.gridA.z : ubo.gridB.z
    );

    vec3 upper = vec3(
            ubo.gridA.x > ubo.gridB.x ? ubo.gridA.x : ubo.gridB.x,
            ubo.gridA.y > ubo.gridB.y ? ubo.gridA.y : ubo.gridB.y,
            ubo.gridA.z > ubo.gridB.z ? ubo.gridA.z : ubo.gridB.z
    );

    if ((ppos.x < lower.x) || (ppos.y < lower.y) || (ppos.z < lower.z) ||
        (ppos.x > upper.x) || (ppos.y > upper.y) || (ppos.z > upper.z)) {
        return vec3(-1,-1,-1);
    }

    vec3 diff = ubo.gridA.xyz - ppos;
    diff /= ubo.kernelh;

    return floor(abs(diff));
}

int getStartIdxOfCell(vec3 tuple) {
    if (!checkBounds(tuple)) return -1;

    return int((tuple.x * cellz * celly + tuple.y * cellz + tuple.z)*list_size);
}

Neighbourhood getNeighbouringCells(vec3 cellTuple) {
    Neighbourhood ret;

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            for (int k = 0; k < 3; k++) {
                ret.neighbour[i * 9 + j * 3 + k] = vec3(cellTuple.x + (i-1), cellTuple.y + (j-1), cellTuple.z + (k-1));
            }
        }
    }

    return ret;
}

void placeParticleIntoCell(int particleIdx) {
    vec3 cellTuple = determineGridTuple(particleIdx, true);

    //if (checkBounds(cellTuple)) {
        int startIdx = getStartIdxOfCell(cellTuple);
        if (startIdx >= 0) {
            uint realIdx = atomicAdd(grid_data.numbers[startIdx], 1);
            realIdx += startIdx + 1;

            // Placing particleIdx into cell
            grid_data.numbers[realIdx] = particleIdx;
        }
    //}
    //grid_data.numbers[particleIdx] = int(realIdx);
}
//----------------------------------------------------------------------------------------------------------------------