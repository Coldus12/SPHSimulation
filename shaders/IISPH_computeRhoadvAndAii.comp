#version 450
layout (local_size_x = 64) in;//256

#include comp_shader.incl

#define storage_in out_data
#define storage_out in_data

//----------------------------------------------------------------------------------------------------------------------

void copyData(uint gID) {
    storage_out.p[gID].x = storage_in.p[gID].x;
    storage_out.p[gID].h = storage_in.p[gID].h;
    storage_out.p[gID].v = storage_in.p[gID].v;
    storage_out.p[gID].m = storage_in.p[gID].m;

    storage_out.p[gID].rho = storage_in.p[gID].rho;
    storage_out.p[gID].p = storage_in.p[gID].p * 0.5;

    storage_out.p[gID].staticP = storage_in.p[gID].staticP;
    storage_out.p[gID].padding = storage_in.p[gID].padding;
}

void computeRhoadvAndAii(uint gID) {
    float rho_adv = 0;
    float aii = 0;

    for (int j = 0; j < ubo.nr_of_particles; j++) {
        if (gID == j)
            continue;

        vec3 dji = vec3(0);
        if (abs(storage_in.p[gID].rho) > 0.0001)
            dji = -ubo.dt * ubo.dt * storage_in.p[gID].m / (storage_in.p[gID].rho * storage_in.p[gID].rho) * cs_gradKernel(storage_in.p[j].x, storage_in.p[gID].x);

        aii += storage_in.p[j].m * dot((iisph_add_data.p[gID].dii - dji), cs_gradKernel(storage_in.p[gID].x, storage_in.p[j].x));

        rho_adv += storage_in.p[j].m * dot((iisph_add_data.p[gID].v_adv - iisph_add_data.p[j].v_adv), cs_gradKernel(storage_in.p[gID].x, storage_in.p[j].x));
    }

    rho_adv *= ubo.dt;
    rho_adv += storage_in.p[gID].rho;

    iisph_add_data.p[gID].rho_adv = rho_adv;
    iisph_add_data.p[gID].aii = aii;

    // pressure init
    storage_in.p[gID].p *= 0.5;
}

void main()
{
    //grab global ID
    uint gID = gl_GlobalInvocationID.x;

    if (gID < ubo.nr_of_particles) {
        copyData(gID);
        computeRhoadvAndAii(gID);
    }
}